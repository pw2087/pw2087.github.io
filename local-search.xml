<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>学习过程中的问题解决</title>
    <link href="/2024/12/22/%E8%A7%A3%E5%86%B3github%E8%AE%BF%E9%97%AE%E7%9A%84%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98/"/>
    <url>/2024/12/22/%E8%A7%A3%E5%86%B3github%E8%AE%BF%E9%97%AE%E7%9A%84%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="解决github访问的网络问题"><a href="#解决github访问的网络问题" class="headerlink" title="解决github访问的网络问题"></a>解决github访问的网络问题</h1><hr><h3 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h3><p><strong>下载watt toolkit加速器可以解决访问网站的问题，但其缺点是ssl认证无法通过</strong></p><h3 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h3><p><strong>通过绕过dns配置来访问</strong></p><p><strong>步骤</strong>：</p><p>​**1.**通过浏览器搜索站长之家dns解析网站，输入github.com域名</p><p>​**2.**从搜索结果在找出速度最快的ip地址，粘贴</p><p>​**3.**找到windiws&#x2F;system32&#x2F;drivers&#x2F;etc&#x2F;host目录，在记事本中以管理员权限修改内容，添加IP地址和域名</p><p><strong>for example</strong>:缺点是速度较慢，需要多长尝试，当ip地址失效时需要进行更换</p><p><img src="C:\Users\pw182\AppData\Roaming\Typora\typora-user-images\image-20241222210126760.png" alt="image-20241222210126760"></p>]]></content>
    
    
    <categories>
      
      <category>问题解决</category>
      
      <category>github网络问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题解决</tag>
      
      <tag>github网络问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker的学习</title>
    <link href="/2024/12/22/DOCKER%20%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/12/22/DOCKER%20%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker笔记"><a href="#Docker笔记" class="headerlink" title="Docker笔记"></a>Docker笔记</h1><hr><h3 id="1-Docker-的基本组成"><a href="#1-Docker-的基本组成" class="headerlink" title="1.Docker 的基本组成"></a>1.Docker 的基本组成</h3><p>镜像，容器，仓库</p><h3 id="2-Docker搜索镜像"><a href="#2-Docker搜索镜像" class="headerlink" title="2.Docker搜索镜像"></a>2.Docker搜索镜像</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs excel">[root@localhost centos]# docker <span class="hljs-built_in">search</span> --help<br><br>Usa<span class="hljs-symbol">ge:</span>  docker <span class="hljs-built_in">search</span> [OPTIONS] TERM<br><br><span class="hljs-built_in">Search</span> Docker Hub for images<br><br>Optio<span class="hljs-symbol">ns:</span><br>  -f, --<span class="hljs-built_in">filter</span> <span class="hljs-built_in">filter</span>   <span class="hljs-built_in">Filter</span> output based on conditions provided<br>      --format string   Pretty-print <span class="hljs-built_in">search</span> using a Go template<br>      --limit <span class="hljs-built_in">int</span>       <span class="hljs-built_in">Max</span> number of <span class="hljs-built_in">search</span> results<br>      --no-<span class="hljs-built_in">trunc</span>        Don&#x27;<span class="hljs-built_in">t</span> truncate output<br><br></code></pre></td></tr></table></figure><h3 id="3-下载镜像"><a href="#3-下载镜像" class="headerlink" title="3.下载镜像"></a>3.下载镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">docker pull 镜像名[:tag]</span><br>[root@localhost centos]# docker pull mysql<br>Using default tag: latest<br>latest: Pulling from library/mysql<br>2c0a233485c3: Pull complete <br>cb5a6a8519b2: Pull complete <br>570d30cf82c5: Pull complete <br>a841bff36f3c: Pull complete <br>80ba30c57782: Pull complete <br>5e49e1f26961: Pull complete <br>ced670fc7f1c: Pull complete <br>0b9dc7ad7f03: Pull complete <br>cd0d5df9937b: Pull complete <br>1f87d67b89c6: Pull complete <br>Digest: sha256:0255b469f0135a0236d672d60e3154ae2f4538b146744966d96440318cc822c6<br>Status: Downloaded newer image for mysql:latest <br><br>docker pull mysql<br>等价于<br>docker pull docker.io/library/mysql:latest #真实地址<br></code></pre></td></tr></table></figure><h3 id="4-删除镜像"><a href="#4-删除镜像" class="headerlink" title="4.删除镜像"></a>4.删除镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost centos]# docker images<br>REPOSITORY    TAG       IMAGE ID       CREATED         SIZE<br>tomcat        latest    f77539e7e45f   12 days ago     467MB<br>mysql         &lt;none&gt;    10db11fef9ce   5 weeks ago     602MB<br>mysql         latest    56a8c14e1404   5 weeks ago     603MB<br>nginx         latest    60c8a892f36f   7 weeks ago     192MB<br>hello-world   latest    d2c94e258dcb   19 months ago   13.3kB<br>centos        latest    5d0da3dc9764   3 years ago     231MB<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker rmi -f 容器<span class="hljs-built_in">id</span> <span class="hljs-comment">#删除指定的容器</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker rmi -f 容器<span class="hljs-built_in">id</span> 容器<span class="hljs-built_in">id</span> 容器<span class="hljs-built_in">id</span> <span class="hljs-comment">#删除多个容器</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker rmi -f $(docker images -aq) <span class="hljs-comment"># 删除全部容器</span></span><br></code></pre></td></tr></table></figure><h3 id="5-容器命令"><a href="#5-容器命令" class="headerlink" title="5.容器命令"></a>5.容器命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">退出容器</span><br>exit # 停止容器并退出<br>ctrl+p+q # 容器不停止退出<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除容器</span><br>docker rm 容器id #删除指定容器，不删除正在运行的容器，强制删除rm -f<br>docker rm -f $(docker ps -aq) # 删除所有容器<br>docker ps -a -q|xargs docker rm #删除所有容器<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动和停止容器</span><br>docker start 容器id #启动容器<br>docker restart 容器id #重启容器<br>docker stop 容器id # 停止容器<br>docker kill 容器id #强行停止当前容器<br></code></pre></td></tr></table></figure><p><strong>列出所有运行的容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">docker ps</span><br>CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES<br>[root@localhost centos]# docker ps --help<br><br>Usage:  docker ps [OPTIONS]<br><br>List containers<br><br>Aliases:<br>  docker container ls, docker container list, docker container ps, docker ps<br><br>Options:<br>  -a, --all             Show all containers (default shows just running) #列出当前运行的容器+历史运行过的容器<br>  -f, --filter filter   Filter output based on conditions provided<br>      --format string   Format output using a custom template:<br>                        &#x27;table&#x27;:            Print output in table format with<br>                        column headers (default)<br>                        &#x27;table TEMPLATE&#x27;:   Print output in table format using<br>                        the given Go template<br>                        &#x27;json&#x27;:             Print in JSON format<br>                        &#x27;TEMPLATE&#x27;:         Print output using the given Go<br>                        template.<br>                        Refer to https://docs.docker.com/go/formatting/ for more<br>                        information about formatting output with templates<br>  -n, --last int        Show n last created containers (includes all states) # 显示最近创建过的容器<br>                        (default -1)<br>  -l, --latest          Show the latest created container (includes all states)<br>      --no-trunc        Don&#x27;t truncate output<br>  -q, --quiet           Only display container IDs # 只显示容器编号<br>  -s, --size            Display total file sizes<br><br></code></pre></td></tr></table></figure><p><strong>后台启动容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">docker run -d</span> <br>[root@localhost centos]# docker run -d centos<br>766d59126860aab8c02c060ea11cc215fd4b4f980a083089b5fda01af69ce2f7<br>[root@localhost centos]# docker ps<br>CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES<br></code></pre></td></tr></table></figure><h3 id="6-其他命令"><a href="#6-其他命令" class="headerlink" title="6.其他命令"></a>6.其他命令</h3><p><strong>查看日志</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker logs -f -t --tail 容器，没有日志<br><span class="hljs-meta prompt_"># </span><span class="language-bash">自己编写一段shell脚本</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker run -d centos /bin/sh -c <span class="hljs-string">&quot;while true;do echo pqb;sleep 10;done&quot;</span></span><br>[root@localhost centos]# docker ps<br>CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES<br>dc10de27bc34   centos    &quot;/bin/sh -c &#x27;while t…&quot;   19 seconds ago   Up 18 seconds             wizardly_cori<br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示日志</span><br>-tf #显示日志<br>--tail number #要显示日志条数<br>[root@localhost centos]# docker logs -t -f --tail 10 dc10de27bc34 <br>2024-11-23T08:25:16.191451033Z pqb<br>2024-11-23T08:25:26.193790811Z pqb<br>2024-11-23T08:25:36.195488602Z pqb<br>2024-11-23T08:25:46.200035543Z pqb<br>2024-11-23T08:25:56.202792514Z pqb<br>2024-11-23T08:26:06.205542385Z pqb<br>2024-11-23T08:26:16.208738451Z pqb<br>2024-11-23T08:26:26.211015830Z pqb<br>2024-11-23T08:26:36.214823284Z pqb<br>2024-11-23T08:26:46.216986866Z pqb<br>2024-11-23T08:26:56.219365847Z pqb<br>2024-11-23T08:27:06.221549730Z pqb<br><br></code></pre></td></tr></table></figure><p><strong>查看容器中的进程信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">docker top 容器<span class="hljs-built_in">id</span></span><br>[root@localhost centos]# docker run -d -it centos<br>6d1c628f88d3c41f18bf4f5038bfc74c44096b752dc02a19a67c6630338bf9d1<br>[root@localhost centos]# docker ps<br>CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES<br>6d1c628f88d3   centos    &quot;/bin/bash&quot;   5 seconds ago   Up 4 seconds             sad_driscoll<br>[root@localhost centos]# docker top 6d1c628f88d3<br>UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD<br>root                13819               13800               0                   00:34               pts/0               00:00:00            /bin/bash<br></code></pre></td></tr></table></figure><p><strong>查看镜像的元数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost centos]# docker images<br>REPOSITORY    TAG       IMAGE ID       CREATED         SIZE<br>tomcat        latest    f77539e7e45f   12 days ago     467MB<br>mysql         latest    56a8c14e1404   5 weeks ago     603MB<br>mysql         &lt;none&gt;    10db11fef9ce   5 weeks ago     602MB<br>nginx         latest    60c8a892f36f   7 weeks ago     192MB<br>hello-world   latest    d2c94e258dcb   19 months ago   13.3kB<br>centos        latest    5d0da3dc9764   3 years ago     231MB<br>[root@localhost centos]# docker inspect 5d0da3dc9764<br>[<br>    &#123;<br>        &quot;Id&quot;: &quot;sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6&quot;,<br>        &quot;RepoTags&quot;: [<br>            &quot;centos:latest&quot;<br>        ],<br>        &quot;RepoDigests&quot;: [<br>            &quot;centos@sha256:a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c473f432b177&quot;<br>        ],<br>        &quot;Parent&quot;: &quot;&quot;,<br>        &quot;Comment&quot;: &quot;&quot;,<br>        &quot;Created&quot;: &quot;2021-09-15T18:20:05.184694267Z&quot;,<br>        &quot;DockerVersion&quot;: &quot;20.10.7&quot;,<br>        &quot;Author&quot;: &quot;&quot;,<br>        &quot;Config&quot;: &#123;<br>            &quot;Hostname&quot;: &quot;&quot;,<br>            &quot;Domainname&quot;: &quot;&quot;,<br>            &quot;User&quot;: &quot;&quot;,<br>            &quot;AttachStdin&quot;: false,<br>            &quot;AttachStdout&quot;: false,<br>            &quot;AttachStderr&quot;: false,<br>            &quot;Tty&quot;: false,<br>            &quot;OpenStdin&quot;: false,<br>            &quot;StdinOnce&quot;: false,<br>            &quot;Env&quot;: [<br>                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;<br>            ],<br>            &quot;Cmd&quot;: [<br>                &quot;/bin/bash&quot;<br>            ],<br>            &quot;Image&quot;: &quot;sha256:f5b050f177fd426be8fe998a8ecf3fb1858d7e26dff4080b29a327d1bd5ba422&quot;,<br>            &quot;Volumes&quot;: null,<br>            &quot;WorkingDir&quot;: &quot;&quot;,<br>            &quot;Entrypoint&quot;: null,<br>            &quot;OnBuild&quot;: null,<br>            &quot;Labels&quot;: &#123;<br>                &quot;org.label-schema.build-date&quot;: &quot;20210915&quot;,<br>                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,<br>                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,<br>                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,<br>                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;<br>            &#125;<br>        &#125;,<br>        &quot;Architecture&quot;: &quot;amd64&quot;,<br>        &quot;Os&quot;: &quot;linux&quot;,<br>        &quot;Size&quot;: 231268856,<br>        &quot;GraphDriver&quot;: &#123;<br>            &quot;Data&quot;: &#123;<br>                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/c32f5edfd00ade477cade4ec636ef8478567a6832a3df6e837fc335688c9f125/merged&quot;,<br>                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/c32f5edfd00ade477cade4ec636ef8478567a6832a3df6e837fc335688c9f125/diff&quot;,<br>                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/c32f5edfd00ade477cade4ec636ef8478567a6832a3df6e837fc335688c9f125/work&quot;<br>            &#125;,<br>            &quot;Name&quot;: &quot;overlay2&quot;<br>        &#125;,<br>        &quot;RootFS&quot;: &#123;<br>            &quot;Type&quot;: &quot;layers&quot;,<br>            &quot;Layers&quot;: [<br>                &quot;sha256:74ddd0ec08fa43d09f32636ba91a0a3053b02cb4627c35051aff89f853606b59&quot;<br>            ]<br>        &#125;,<br>        &quot;Metadata&quot;: &#123;<br>            &quot;LastTagTime&quot;: &quot;0001-01-01T00:00:00Z&quot;<br>        &#125;<br>    &#125;<br>]<br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">docker <span class="hljs-built_in">exec</span> <span class="hljs-comment">#进入容器后开启一个新的终端，可以在里面操作（常用）</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker attach <span class="hljs-comment">#进入容器正在执行的终端，不会启动新的进程</span></span><br>[root@localhost centos]# docker ps<br>CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES<br>6d1c628f88d3   centos    &quot;/bin/bash&quot;   7 minutes ago   Up 7 minutes             sad_driscoll<br>[root@localhost centos]# docker exec 6d1c628f88d3<br>&quot;docker exec&quot; requires at least 2 arguments.<br>See &#x27;docker exec --help&#x27;.<br><br>Usage:  docker exec [OPTIONS] CONTAINER COMMAND [ARG...]<br><br>Execute a command in a running container<br>[root@localhost centos]# docker exec -it 6d1c628f88d3 /bin/bash<br>[root@6d1c628f88d3 /]# ls<br>bin  etc   lib  lost+found  mnt  proc  run   srv  tmp  var<br>dev  home  lib64  media       opt  root  sbin  sys  usr<br>[root@6d1c628f88d3 /]# ps -ef<br>UID          PID    PPID  C STIME TTY          TIME CMD<br>root           1       0  0 08:34 pts/0    00:00:00 /bin/bash<br>root          15       0  0 08:42 pts/1    00:00:00 /bin/bash<br>root          30      15  0 08:42 pts/1    00:00:00 ps -ef<br><span class="hljs-meta prompt_">#</span><span class="language-bash">方式2</span><br>[root@localhost centos]# docker attach 6d1c628f88d3  <br></code></pre></td></tr></table></figure><p><strong>从容器内拷贝文件到主机上</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">docker <span class="hljs-built_in">cp</span> 容器<span class="hljs-built_in">id</span>：容器内路径 目的的主机路径</span><br></code></pre></td></tr></table></figure><h3 id="commit-镜像"><a href="#commit-镜像" class="headerlink" title="commit 镜像"></a>commit 镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名：[tag]<br></code></pre></td></tr></table></figure><h3 id="7-数据卷"><a href="#7-数据卷" class="headerlink" title="7.数据卷"></a>7.数据卷</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">方式1：直接使用命令来挂载 -v</span><br>docker run -it -v 主机目录：容器内目录<br></code></pre></td></tr></table></figure><p><strong>具名和匿名挂载</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">匿名挂载</span><br>-v 容器内路径<br>[root@localhost centos]# docker run -d -v /ect/nginx nginx<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看volume的情况</span><br>[root@localhost centos]# docker volume ls<br>DRIVER    VOLUME NAME<br>local     0c0a3ec1894c8cb5dd5bfa4befb68179c48775da2be290db8b15f1b7e51830a7<br>local     73e78f85473090460a2e3a1078453fab97d647c96b795c9267d663178f982134<br>local     e692ecfe93d5099aebb5fafa2b5db0f0cb5fd5fc3fccac5c9613bfdca4b2d725<br><span class="hljs-meta prompt_"># </span><span class="language-bash">发现这就是匿名挂载，我们没有写容器外的路径</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">具名挂载</span><br>[root@localhost centos]# docker run -d -v jjuming-nginx:/ect/nginx nginx<br>1d30d4d120c0ee2e7c27b86402f97a701443ab46d8fa338ab3866ae3fc4b4bd4<br>[root@localhost centos]# docker volume ls<br>DRIVER    VOLUME NAME<br>local     0c0a3ec1894c8cb5dd5bfa4befb68179c48775da2be290db8b15f1b7e51830a7<br>local     73e78f85473090460a2e3a1078453fab97d647c96b795c9267d663178f982134<br>local     e692ecfe93d5099aebb5fafa2b5db0f0cb5fd5fc3fccac5c9613bfdca4b2d725<br>local     jjuming-nginx<br>[root@localhost centos]# docker volume inspect jjuming-nginx<br>[<br>    &#123;<br>        &quot;CreatedAt&quot;: &quot;2024-11-23T01:01:45-08:00&quot;,<br>        &quot;Driver&quot;: &quot;local&quot;,<br>        &quot;Labels&quot;: null,<br>        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/jjuming-nginx/_data&quot;,<br>        &quot;Name&quot;: &quot;jjuming-nginx&quot;,<br>        &quot;Options&quot;: null,<br>        &quot;Scope&quot;: &quot;local&quot;<br>    &#125;<br>]<br><span class="hljs-meta prompt_">#</span><span class="language-bash">所有的docker容器内的卷，没有指定目录的情况下都是在/var/lib/docker/volumes/xxxx/_data</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">我们通过具名挂载可以方便的找到我们的一个卷，大多数情况使用具名挂载</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如何确定是具名挂载还是匿名挂载，还是指定路径挂载</span><br>-v 容器内路径 #匿名挂载<br>-v 卷名：容器内路径 #具名挂载<br>-v /宿主机路径：：容器内路径 # 指定路径挂载<br><br></code></pre></td></tr></table></figure><h2 id="初始Dokcerfile"><a href="#初始Dokcerfile" class="headerlink" title="初始Dokcerfile"></a>初始Dokcerfile</h2><hr><p>Dockerfile 就是用来构建docker镜像的构建文件！命令脚本！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建一个dockerfile文件,名字可以随机 建议Dockerfile</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">文件中的内容 指令（大写） 参数</span><br>[root@localhost centos]# vim Dockerfile<br>FROM centos<br>VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]<br>CMD echo &quot;---end---&quot;<br>CMD //bin/bash<br><span class="hljs-meta prompt_"># </span><span class="language-bash">这里的每个命令，就是镜像的一层</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">dockerfile构建镜像</span><br>-f 等价于--file<br>-t 等价于--tag <br>[root@localhost centos]# docker build -f Dockerfile -t mycentos:1.0 .<br>[+] Building 0.2s (5/5) FINISHED                                         docker:default<br> =&gt; [internal] load build definition from Dockerfile                               0.0s<br> =&gt; =&gt; transferring dockerfile: 176B                                               0.0s<br> =&gt; [internal] load metadata for docker.io/library/centos:latest                   0.0s<br> =&gt; [internal] load .dockerignore                                                  0.0s<br> =&gt; =&gt; transferring context: 2B                                                    0.0s<br> =&gt; [1/1] FROM docker.io/library/centos:latest                                     0.0s<br> =&gt; exporting to image                                                             0.0s<br> =&gt; =&gt; exporting layers                                                            0.0s<br> =&gt; =&gt; writing image sha256:ff9b165ae15eb1446c18edabca5d50f9a59fa1679682b7f1f5581  0.0s<br> =&gt; =&gt; naming to docker.io/library/mycentos:1.0                                    0.0s<br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker <span class="hljs-built_in">history</span> 查看镜像的变更历史</span><br>[root@localhost centos]# docker history mycentos:1.0<br>IMAGE          CREATED       CREATED BY                                      SIZE      COMMENT<br>ff9b165ae15e   3 years ago   CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;//bin/bash&quot;]               0B        buildkit.dockerfile.v0<br>&lt;missing&gt;      3 years ago   CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;echo \&quot;---end---\&quot;&quot;]       0B        buildkit.dockerfile.v0<br>&lt;missing&gt;      3 years ago   VOLUME [volume01 volume02]                      0B        buildkit.dockerfile.v0<br>&lt;missing&gt;      3 years ago   /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]            0B        <br>&lt;missing&gt;      3 years ago   /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B        <br>&lt;missing&gt;      3 years ago   /bin/sh -c #(nop) ADD file:805cb5e15fb6e0bb0…   231MB  <br></code></pre></td></tr></table></figure><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost centos]# docker run -d -it --name docker02 --volumes-from docker01 centos<br>容器之间配置信息的传递，数据卷容器的生命周期一直持续到没有容器为止<br>但是一旦你持久化到了本地，本地的数据是不会删除的<br></code></pre></td></tr></table></figure><h3 id="Dockerfile-指令"><a href="#Dockerfile-指令" class="headerlink" title="Dockerfile 指令"></a>Dockerfile 指令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">FROM         # 基础镜像，当前新镜像是基于哪个镜像的<br>MAINTAINER   # 镜像维护者的姓名混合邮箱地址<br>RUN          # 容器构建时需要运行的命令<br>EXPOSE       # 当前容器对外保留出的端口<br>WORKDIR      # 指定在创建容器后，终端默认登录的进来工作目录，一个落                脚点<br>ENV          # 用来在构建镜像过程中设置环境变量<br>ADD          # 将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL                和解压tar压缩包<br>COPY         # 类似ADD，拷贝文件和目录到镜像中！<br>VOLUME       # 容器数据卷，用于数据保存和持久化工作<br>CMD          # 指定一个容器启动时要运行的命令，dockerFile中可以有                多个CMD指令，但只有最后一个生效！<br>ENTRYPOINT   # 指定一个容器启动时要运行的命令！和CMD一样<br>ONBUILD      # 当构建一个被继承的DockerFile时运行命令，父镜像在被                子镜像继承后，父镜像的ONBUILD被触发<br></code></pre></td></tr></table></figure><h3 id="CMD和ENTRYPOINT的区别"><a href="#CMD和ENTRYPOINT的区别" class="headerlink" title="CMD和ENTRYPOINT的区别"></a>CMD和ENTRYPOINT的区别</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">CMD  #指定这个容器启动的时候需要运行的命令，只有最后一个会生效，可以被替代<br>ENTRYPOINT #指定这个容器启动时需要运行的命令，可以追加命令<br></code></pre></td></tr></table></figure><h2 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h2><p>1.我们每启动一个docker容器，docker就会给容器分配一个ip,有一个网卡docker0桥接模式，使用的技术是evth-pair技术</p><h3 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h3><p><strong>网络模式</strong></p><p>bridge:桥接docker</p><p>none:不配置网络</p><p>host：和宿主机共享网络</p><p>container:容器网络联通</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">自定义网络<br>-driver bridge 网络类型<br>-subnet 子网<br>-gateway 网关<br><span class="hljs-meta prompt_">#</span><span class="language-bash">docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">ip addr <span class="hljs-comment">#查看网卡</span></span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网安学习</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你好，欢迎来到我的博客</title>
    <link href="/2024/12/22/%E4%BD%A0%E5%A5%BD%EF%BC%8C%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/12/22/%E4%BD%A0%E5%A5%BD%EF%BC%8C%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="你好，欢迎来到我的博客"><a href="#你好，欢迎来到我的博客" class="headerlink" title="你好，欢迎来到我的博客"></a>你好，欢迎来到我的博客</h1><hr><h2 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h2><p>作者：彭阡箔</p><p>邮箱：<a href="mailto:&#50;&#x30;&#x38;&#x37;&#55;&#x32;&#51;&#56;&#x32;&#x32;&#x30;&#x40;&#113;&#x71;&#x2e;&#99;&#111;&#x6d;">&#50;&#x30;&#x38;&#x37;&#55;&#x32;&#51;&#56;&#x32;&#x32;&#x30;&#x40;&#113;&#x71;&#x2e;&#99;&#111;&#x6d;</a></p><p>qq:2087723820</p><hr><p><strong>留言：希望大家有问题可以及时留言评论</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/12/22/hello-world/"/>
    <url>/2024/12/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
